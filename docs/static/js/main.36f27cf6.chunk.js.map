{"version":3,"sources":["api/api.ts","redux/reducers/searchResucerTypes.ts","redux/reducers/searchReducer.ts","components/BookCard.tsx","components/BookPage.tsx","images/loader.gif","components/Preloader.tsx","components/BooksResults.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["api","apiKey","process","search","query","startIndex","sort","axios","get","then","res","data","GET_SEARCH_DATA","GET_MORE_RESULTS","SET_CURRENT_SEARCH","SET_IS_OPEN","FILTER_BY_CATEGORY","TOGGLE_IS_FETCHING","initialState","isFetching","totalItems","bookItems","currentSearch","value","category","step","toggleIsFetching","type","payload","filterByCategory","setCurrentSearch","searchReducer","state","action","books","map","book","id","isOpen","stepAndIndex","items","length","item","title","volumeInfo","authors","categories","description","imageUrl","imageLinks","thumbnail","newItems","filteredItems","filter","toLowerCase","BookCard","openHandler","className","onClick","alt","src","join","BookPage","setIsOpen","Preloader","loader","connect","searchData","getMoreResultsThunk","dispatch","a","response","some","i","getSearchDataThunk","ref","useRef","useState","setSort","setCategory","onSubmit","e","preventDefault","current","trim","submitHandler","placeholder","onChange","target","c","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36f27cf6.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\ninterface IApi {\r\n    apiKey: string\r\n    search: (query: string, startIndex: number, sort: string) => Promise<void>\r\n}\r\n\r\nconst api: IApi = {\r\n    apiKey: process.env.REACT_APP_API_KEY as string,\r\n    search: (query, startIndex, sort) => {\r\n        return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=30&startIndex=${startIndex}&orderBy=${sort}&key=${api.apiKey}`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\nexport default api","import { ThunkAction } from \"redux-thunk\"\r\n\r\nexport const GET_SEARCH_DATA: string = 'GET_SEARCH_DATA'\r\nexport const GET_MORE_RESULTS: string = 'GET_MORE_RESULTS'\r\nexport const SET_CURRENT_SEARCH: string = 'GET_CURRENT_SEARCH'\r\nexport const SET_IS_OPEN: string = 'SET_ISOPEN'\r\nexport const FILTER_BY_CATEGORY: string = 'GET_CATEGORY'\r\nexport const TOGGLE_IS_FETCHING: string = 'TOGGLE_IS_FETCHING'\r\n\r\nexport interface IBook {\r\n    title: string\r\n    authors: string[]\r\n    id: string\r\n    category: string[]\r\n    description: string\r\n    imageUrl: string\r\n    isOpen: boolean\r\n}\r\nexport interface IState {\r\n    isFetching: boolean\r\n    totalItems: number\r\n    bookItems: IBook[]\r\n    currentSearch: {\r\n        value: string\r\n        category: string\r\n        sort: string\r\n        step: number\r\n        startIndex: number\r\n    }\r\n}\r\nexport type toggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    payload: { isFetching: boolean }\r\n}\r\nexport type getCategoryType = {\r\n    type: typeof FILTER_BY_CATEGORY\r\n    payload: { category: string }\r\n}\r\nexport type setIsOpenType = {\r\n    type: typeof SET_IS_OPEN,\r\n    payload: { id: string }\r\n}\r\nexport type getSearchDataType = {\r\n    type: typeof GET_SEARCH_DATA\r\n    payload: any\r\n}\r\nexport type getMoreResultsType = {\r\n    type: typeof GET_MORE_RESULTS\r\n    payload: any\r\n}\r\nexport type setCurrentSearchType = {\r\n    type: typeof SET_CURRENT_SEARCH\r\n    payload: {\r\n        value: string\r\n        category: string\r\n        sort: string\r\n    }\r\n}\r\nexport type actionsTypes = getMoreResultsType | setCurrentSearchType | getSearchDataType | setIsOpenType | getCategoryType | toggleIsFetchingType\r\nexport type ThunkType = ThunkAction<void, IState, unknown, actionsTypes>","import api from \"../../api/api\"\r\nimport {\r\n    actionsTypes, FILTER_BY_CATEGORY, getCategoryType, getMoreResultsType, getSearchDataType, GET_MORE_RESULTS,\r\n    GET_SEARCH_DATA, IBook, IState, setCurrentSearchType, setIsOpenType, SET_CURRENT_SEARCH, SET_IS_OPEN,\r\n    ThunkType, toggleIsFetchingType, TOGGLE_IS_FETCHING\r\n} from \"./searchResucerTypes\"\r\n\r\nconst initialState: IState = {\r\n    isFetching: false,\r\n    totalItems: 0,\r\n    bookItems: [],\r\n    currentSearch: {\r\n        value: '',\r\n        category: '',\r\n        sort: '',\r\n        step: 1,\r\n        startIndex: 0,\r\n    }\r\n}\r\nconst searchReducer = (state = initialState, action: actionsTypes): IState => {\r\n    switch (action.type) {\r\n        case TOGGLE_IS_FETCHING:\r\n            return { ...state, isFetching: action.payload.isFetching }\r\n        case SET_IS_OPEN:\r\n            const books = state.bookItems.map(book => {\r\n                if (book.id === action.payload.id) book.isOpen = !book.isOpen\r\n                return book\r\n            })\r\n            return { ...state, bookItems: books }\r\n        case SET_CURRENT_SEARCH:\r\n            const stepAndIndex = (state.currentSearch.value === action.payload.value\r\n                && state.currentSearch.category === action.payload.category\r\n                && state.currentSearch.sort === action.payload.sort\r\n            ) ? {\r\n                startIndex: state.currentSearch.startIndex += 30, // booksToShow = 30\r\n                step: state.currentSearch.step += 1\r\n            }\r\n                : { startIndex: 0, step: 1 }\r\n            return {\r\n                ...state, currentSearch: {\r\n                    value: action.payload.value,\r\n                    category: action.payload.category,\r\n                    sort: action.payload.sort,\r\n                    ...stepAndIndex\r\n                }\r\n            }\r\n        case GET_SEARCH_DATA:\r\n            const bookItems = action.payload.items?.length ? action.payload.items.map((item: any) => {\r\n                return {\r\n                    id: item.id,\r\n                    title: item.volumeInfo.title,\r\n                    authors: item.volumeInfo.authors,\r\n                    category: item.volumeInfo.categories,\r\n                    description: item.volumeInfo.description,\r\n                    imageUrl: item.volumeInfo.imageLinks?.thumbnail,\r\n                    isOpen: false\r\n                }\r\n            }) : []\r\n            return { ...state, totalItems: action.payload.totalItems, bookItems }\r\n        case GET_MORE_RESULTS:\r\n            const newItems = action.payload.items ? action.payload.items.map((item: any) => {\r\n                return {\r\n                    id: item.id,\r\n                    title: item.volumeInfo.title,\r\n                    authors: item.volumeInfo.authors,\r\n                    category: item.volumeInfo.categories,\r\n                    description: item.description,\r\n                    imageUrl: item.volumeInfo.imageLinks?.thumbnail,\r\n                    isOpen: false\r\n                }\r\n            }) : []\r\n            return { ...state, bookItems: [...state.bookItems, ...newItems] }\r\n        case FILTER_BY_CATEGORY:\r\n\r\n            const filteredItems = state.bookItems.filter((book: IBook) => {\r\n                if (action.payload.category === 'all') return book\r\n                if (book.category?.[0].toLowerCase() === action.payload.category) return book\r\n                return null\r\n            })\r\n            return { ...state, bookItems: filteredItems }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsOpen = (id: string): setIsOpenType => ({ type: SET_IS_OPEN, payload: { id } })\r\n\r\nconst toggleIsFetching = (isFetching: boolean): toggleIsFetchingType => ({ type: TOGGLE_IS_FETCHING, payload: { isFetching } })\r\nconst filterByCategory = (category: string): getCategoryType => ({ type: FILTER_BY_CATEGORY, payload: { category } })\r\nconst getSearchData = (payload: any): getSearchDataType => ({ type: GET_SEARCH_DATA, payload })\r\nconst getMoreResults = (payload: any): getMoreResultsType => ({ type: GET_MORE_RESULTS, payload })\r\nconst setCurrentSearch = (value: string, category: string, sort: string): setCurrentSearchType => (\r\n    { type: SET_CURRENT_SEARCH, payload: { value, category, sort } })\r\n\r\nexport const getSearchDataThunk = (value: string, startIndex: number, sort: string, category: string): ThunkType => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentSearch(value, category, sort))\r\n    const response = await api.search(value, startIndex, sort)\r\n    dispatch(getSearchData(response))\r\n    dispatch(filterByCategory(category))\r\n    dispatch(toggleIsFetching(false))\r\n}\r\nexport const getMoreResultsThunk = (data: IState): ThunkType => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentSearch(data.currentSearch.value, data.currentSearch.category, data.currentSearch.sort))\r\n    const response = await api.search(data.currentSearch.value, data.currentSearch.startIndex, data.currentSearch.sort)\r\n    dispatch(getMoreResults(response))\r\n    dispatch(filterByCategory(data.currentSearch.category))\r\n    dispatch(toggleIsFetching(false))\r\n}\r\nexport default searchReducer","import React from 'react'\r\nimport { IBook } from '../redux/reducers/searchResucerTypes'\r\n\r\ntype BookCardProps = {\r\n    book: IBook\r\n    openHandler: (id: string) => void\r\n}\r\nconst BookCard: React.FC<BookCardProps> = ({ book, openHandler }) => {\r\n    return (\r\n        <div className='col-lg-3 col-md-4 col-sm-6 book-card'>\r\n            <div onClick={() => openHandler(book.id)} className='book-card__inner'>\r\n                <div className='book-card__img'>\r\n                    <img alt={book.title} src={book.imageUrl} />\r\n                </div>\r\n                <div className='book-card__text'>\r\n                    <p className='category-text'>{book.category?.[0] || 'All'}</p>\r\n                    <h4>{book.title}</h4>\r\n                    <p className='authors'>{book.authors?.join(', ') || ''}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookCard\r\n","import React from 'react'\r\nimport { IBook } from '../redux/reducers/searchResucerTypes'\r\n\r\ntype BookPageProps = {\r\n    book: IBook\r\n    setIsOpen: (id: string) => void\r\n}\r\nconst BookPage: React.FC<BookPageProps> = ({ book, setIsOpen }) => {\r\n    return (\r\n        <div className='book-page row'>\r\n            <div className='col-sm-6 book-page__img-container'>\r\n                <img alt={book.title} src={book.imageUrl} />\r\n            </div>\r\n            <div className='col-sm-6 book-page_right'>\r\n                <div>\r\n                    <span className='category-text d-block'>{book.category?.join(', ')}</span>\r\n                    <h2>{book.title}</h2>\r\n                    <p>{book.authors?.join(', ')}</p>\r\n                    <p>{book.description}</p>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => setIsOpen(book.id)} className='books-button'>Back</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookPage\r\n","export default __webpack_public_path__ + \"static/media/loader.13e75cb5.gif\";","import React from 'react'\r\nimport loader from '../images/loader.gif'\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n        <div className='preloader'>\r\n            <img src={loader} alt='loading...' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getMoreResultsThunk, setIsOpen } from '../redux/reducers/searchReducer'\r\nimport { IBook, IState } from '../redux/reducers/searchResucerTypes'\r\nimport { state } from '../redux/store'\r\nimport BookCard from './BookCard'\r\nimport BookPage from './BookPage'\r\nimport Preloader from './Preloader'\r\n\r\ntype BooksResultsProps = {\r\n    books: IState\r\n    getMoreResultsThunk: (data: any) => void\r\n    setIsOpen: (id: string) => void\r\n}\r\nconst BooksResults: React.FC<BooksResultsProps> = ({ books, getMoreResultsThunk, setIsOpen }) => {\r\n    const isBookOpen: boolean = books.bookItems.some((book: IBook) => book.isOpen === true)\r\n    return isBookOpen\r\n        ? <BookPage book={books.bookItems.filter((book: IBook) => book.isOpen === true)[0]} setIsOpen={setIsOpen} />\r\n        : (\r\n            <div className='container books-results'>\r\n                {(!books.bookItems.length && books.isFetching) && <Preloader />}\r\n                {!!books.bookItems.length &&\r\n                    <>\r\n                        <p className='text-center'>\r\n                            found {books.totalItems} results in all categories, showing results for the category {books.currentSearch.category}\r\n                        </p>\r\n                        <div className='row book-results__items'>\r\n                            {books.bookItems.map((item: IBook, i: number) => <BookCard key={i} book={item} openHandler={setIsOpen} />)}\r\n                        </div>\r\n                        {books.totalItems - books.currentSearch.startIndex <= 30\r\n                            ? null\r\n                            : books.isFetching\r\n                                ? <Preloader />\r\n                                : <button onClick={() => getMoreResultsThunk(books)} className='books-button more-button'> Load more</button>}\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state: state) => ({ books: state.searchData })\r\n\r\nexport default connect(mapStateToProps, { getMoreResultsThunk, setIsOpen })(BooksResults)\r\n","import React, { useRef, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getSearchDataThunk } from '../redux/reducers/searchReducer'\r\n\r\ntype headerProps = {\r\n    getSearchDataThunk: (value: string, startIndex: number, sort: string, category: string) => void\r\n}\r\n\r\nconst Header: React.FC<headerProps> = ({ getSearchDataThunk }) => {\r\n    const ref = useRef<HTMLInputElement>(null)\r\n    const [sort, setSort] = useState<string>('relevance')\r\n    const [category, setCategory] = useState<string>('all')\r\n\r\n    const submitHandler = (e: React.FormEvent): void => {\r\n        e.preventDefault()\r\n        getSearchDataThunk(ref.current!.value.trim(), 0, sort, category)\r\n        ref.current!.value = ''\r\n    }\r\n    const categories: string[] = ['all', 'art', 'biography', 'computers', 'history', 'medical', 'poetry']\r\n    return (\r\n        <header className='header '>\r\n            <div className='header__inner'>\r\n                <h1 className='text-center'>Search for books</h1>\r\n                <form className='row search-form' onSubmit={(e: React.FormEvent) => submitHandler(e)}>\r\n                    <div className='col-12 search-form__input'>\r\n                        <input ref={ref} placeholder='Search for books' />\r\n                        <button type='submit' >Search</button>\r\n                    </div>\r\n                    <div className='col-md-6'>\r\n                        <label >Sort By</label>\r\n                        <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setSort(e.target.value)} >\r\n                            <option value='relevance'>Relevance</option>\r\n                            <option value='newest'>Newest</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className='col-md-6'>\r\n                        <label >Categories</label>\r\n                        <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setCategory(e.target.value)} >\r\n                            {categories.map((c: string) => <option key={c} value={c}>{c}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default connect(null, { getSearchDataThunk })(Header)\r\n","import React from \"react\";\nimport BooksResults from \"./components/BooksResults\";\nimport Header from \"./components/Header\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Header />\n      <BooksResults />\n    </div>\n  );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport searchReducer from \"./reducers/searchReducer\";\r\n\r\nconst reducer = combineReducers({\r\n    searchData: searchReducer\r\n})\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk))\r\n\r\ntype rootReducer = typeof reducer\r\nexport type state = ReturnType<rootReducer>\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}